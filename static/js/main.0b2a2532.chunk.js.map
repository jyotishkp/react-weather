{"version":3,"sources":["api.js","App.js","serviceWorker.js","index.js"],"names":["getWeather","position","axios","get","coords","latitude","longitude","App","props","state","weather","sunrise","sunset","main","wind","that","this","navigator","geolocation","getCurrentPosition","then","res","dayNight","data","icon","split","setState","sys","place","name","temp","hasTemp","today","Date","className","Math","round","Navbar","bg","variant","fixed","Brand","Collapse","Text","Container","fluid","Row","Col","sm","md","id","description","format","Table","feels_like","temp_max","temp_min","pressure","humidity","speed","unix","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.0b2a2532.chunk.js","sourcesContent":["import axios from 'axios';\n\nfunction getWeather(position) {\n    return axios.get(`https://api.openweathermap.org/data/2.5/weather?lat=${position.coords.latitude}&lon=${position.coords.longitude}&APPID=0ba9b446415312d26e56f2196b060cd5&units=Metric`);\n}\n\nexport default getWeather;","import React, { Component } from 'react';\nimport Moment from 'react-moment';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Table from 'react-bootstrap/Table';\nimport Navbar from 'react-bootstrap/Navbar';\n\nimport './css/App.css';\nimport './css/owfont-regular.min.css';\nimport getWeather from './api';\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      weather: {},\n      sunrise: '',\n      sunset: '',\n      main: '',\n      wind: ''\n    }\n  }\n\n  componentDidMount() {\n    let that = this;\n    navigator.geolocation.getCurrentPosition(getWeatherData);\n\n    function getWeatherData(position) {\n      getWeather(position).then(res => {\n\n        let dayNight = res.data.weather[0].icon.split('')[2] === 'd' ? 'day' : 'night';\n\n        that.setState({\n          weather: res.data.weather[0],\n          sunrise: res.data.sys.sunrise,\n          sunset: res.data.sys.sunset,\n          main: res.data.main,\n          wind: res.data.wind,\n          place: res.data.name,\n          dayNight: dayNight\n        });\n      });\n    }\n  }\n\n  render() {\n    let hasTemp = this.state.main.temp;\n    let temp;\n    let today = new Date();\n    if (!hasTemp) {\n      temp = <span>Loading....</span>;\n    } else {\n      temp = <span className=\"temp\">{Math.round(this.state.main.temp)}&deg;C</span>;\n    }\n\n    return (\n      <div className=\"App\">\n        <Navbar bg=\"dark\" variant=\"dark\" fixed=\"top\">\n          <Navbar.Brand>\n            <i className='owf owf-201'></i>{' '}\n          Weather\n            </Navbar.Brand>\n          <Navbar.Collapse className=\"justify-content-end\">\n            <Navbar.Text>\n              {this.state.place}\n            </Navbar.Text>\n          </Navbar.Collapse>\n        </Navbar>\n        <Container fluid className={this.state.dayNight}>\n          <Row>\n            <Col sm={12} md={6}>\n              <Row >\n                <Col>\n                  {temp}\n                </Col>\n              </Row>\n              <Row >\n                <Col className=\"weather-icon\">\n                  <i className={`owf owf-${this.state.weather.id}`}></i>\n                </Col>\n              </Row>\n              <Row>\n                <Col>\n                  <span className=\"description\">{this.state.weather.description} . </span><Moment format=\"MMMM Do YYYY . dddd\">{today}</Moment>\n                </Col>\n              </Row>\n            </Col>\n            <Col sm={12} md={6} className=\"detail-col\">\n              <Table className=\"weather-detail\" variant=\"dark\">\n                <tbody>\n                  <tr>\n                    <td>Feels Like</td>\n                    <td>{this.state.main.feels_like}&deg;C</td>\n                  </tr>\n                  <tr>\n                    <td>Max</td>\n                    <td>{this.state.main.temp_max} &deg;C</td>\n                  </tr>\n                  <tr>\n                    <td>Min</td>\n                    <td>{this.state.main.temp_min} &deg;C</td>\n                  </tr>\n                  <tr>\n                    <td>Pressure</td>\n                    <td>{this.state.main.pressure} hPa</td>\n                  </tr>\n                  <tr>\n                    <td>Humidity</td>\n                    <td>{this.state.main.humidity}%</td>\n                  </tr>\n                  <tr>\n                    <td>Wind Speed</td>\n                    <td>{this.state.wind.speed}m/s</td>\n                  </tr>\n                  <tr>\n                    <td>Sunrise</td>\n                    <td><Moment unix format=\"h:mm a\">{this.state.sunrise}</Moment></td>\n                  </tr>\n                  <tr>\n                    <td>Sunset</td>\n                    <td><Moment unix format=\"h:mm a\">{this.state.sunset}</Moment></td>\n                  </tr>\n                </tbody>\n              </Table>\n            </Col>\n          </Row>\n        </Container>\n      </div>\n    );\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}